[
  {
    "objectID": "Story_Telling/project1.html",
    "href": "Story_Telling/project1.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Story_Telling/project2.html",
    "href": "Story_Telling/project2.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Story_Telling/project4.html",
    "href": "Story_Telling/project4.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Machine_Learning/project3.html",
    "href": "Machine_Learning/project3.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Machine_Learning/project5.html",
    "href": "Machine_Learning/project5.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "full_stack.html",
    "href": "full_stack.html",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "full_stack.html#title-2-header",
    "href": "full_stack.html#title-2-header",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "Full_Stack/project3.html",
    "href": "Full_Stack/project3.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Full_Stack/project5.html",
    "href": "Full_Stack/project5.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "competition.html",
    "href": "competition.html",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "competition.html#title-2-header",
    "href": "competition.html#title-2-header",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "Cleansing_Projects/project3.html",
    "href": "Cleansing_Projects/project3.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Cleansing_Projects/project5.html",
    "href": "Cleansing_Projects/project5.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Competition/project1.html",
    "href": "Competition/project1.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Competition/project2.html",
    "href": "Competition/project2.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Competition/project4.html",
    "href": "Competition/project4.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "notebooks/starter_housing.html",
    "href": "notebooks/starter_housing.html",
    "title": "Jezreel Franco - Data Science Portfolio",
    "section": "",
    "text": "!pip install scikit-learn==1.5.2\n\n\nCollecting scikit-learn==1.5.2\n\n  Downloading scikit_learn-1.5.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (13 kB)\n\nRequirement already satisfied: numpy&gt;=1.19.5 in /usr/local/lib/python3.11/dist-packages (from scikit-learn==1.5.2) (1.26.4)\n\nRequirement already satisfied: scipy&gt;=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn==1.5.2) (1.13.1)\n\nRequirement already satisfied: joblib&gt;=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn==1.5.2) (1.4.2)\n\nRequirement already satisfied: threadpoolctl&gt;=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn==1.5.2) (3.5.0)\n\nDownloading scikit_learn-1.5.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (13.3 MB)\n\n   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 13.3/13.3 MB 86.1 MB/s eta 0:00:00\n\nInstalling collected packages: scikit-learn\n\n  Attempting uninstall: scikit-learn\n\n    Found existing installation: scikit-learn 1.6.1\n\n    Uninstalling scikit-learn-1.6.1:\n\n      Successfully uninstalled scikit-learn-1.6.1\n\nSuccessfully installed scikit-learn-1.5.2\n\n\n\n\n\n# Import the libraries we need\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\n\n#read in the training data\nhousing = pd.read_csv('https://raw.githubusercontent.com/byui-cse/cse450-course/master/data/housing.csv')\nhousing.head()\n\n\n    \n\n\n\n\n\n\nid\ndate\nbedrooms\nbathrooms\nsqft_living\nsqft_lot\nfloors\nwaterfront\nview\ncondition\n...\nsqft_above\nsqft_basement\nyr_built\nyr_renovated\nzipcode\nlat\nlong\nsqft_living15\nsqft_lot15\nprice\n\n\n\n\n0\n1565930130\n20141104T000000\n4\n3.25\n3760\n4675\n2.0\n0\n0\n3\n...\n2740\n1020\n2007\n0\n98038\n47.3862\n-122.048\n3280\n4033\n429900.0\n\n\n1\n3279000420\n20150115T000000\n3\n1.75\n1460\n7800\n1.0\n0\n0\n2\n...\n1040\n420\n1979\n0\n98023\n47.3035\n-122.382\n1310\n7865\n233000.0\n\n\n2\n194000575\n20141014T000000\n4\n1.00\n1340\n5800\n1.5\n0\n2\n3\n...\n1340\n0\n1914\n0\n98116\n47.5658\n-122.389\n1900\n5800\n455000.0\n\n\n3\n2115510160\n20141208T000000\n3\n1.75\n1440\n8050\n1.0\n0\n0\n3\n...\n1440\n0\n1985\n0\n98023\n47.3187\n-122.390\n1790\n7488\n258950.0\n\n\n4\n7522500005\n20140815T000000\n2\n1.50\n1780\n4750\n1.0\n0\n0\n4\n...\n1080\n700\n1947\n0\n98117\n47.6859\n-122.395\n1690\n5962\n555000.0\n\n\n\n\n5 rows × 21 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\n# Get our target variable and features and split them into test and train datasets\nX = housing[['bedrooms',\n         'bathrooms',\n         'sqft_living',\n         'sqft_lot',\n         'floors',\n         'waterfront',\n         'view',\n         'condition',\n         'grade',\n         'sqft_above',\n         'sqft_basement',\n         'yr_built',\n         'yr_renovated',\n         'zipcode',\n         'sqft_living15',\n         'sqft_lot15'\n         ]]\n\ny = housing['price']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n\n# Train an XGBoost regressor\nmodel = XGBRegressor()\nmodel.fit(X_train, y_train)\n\n# Get feature importance scores\nimportance = model.feature_importances_\nfeature_names = X_train.columns  # Get feature names\n\n# Sort indices by importance (descending)\nsorted_idx = np.argsort(importance)[::-1]\n\n# Print feature importance values with names\nprint(\"Feature Importances:\")\nfor idx in sorted_idx:\n    print(f\"{feature_names[idx]}: {importance[idx]:.4f}\")\n\n# Plot feature importance\nplt.figure(figsize=(10, 6))\nplt.barh(feature_names[sorted_idx], importance[sorted_idx], color='skyblue')  # Use feature names instead of index\nplt.xlabel(\"Feature Importance Score\")\nplt.ylabel(\"Feature\")\nplt.title(\"Feature Importance in XGBoost Regressor\")\nplt.gca().invert_yaxis()  # Most important feature at the top\nplt.show()\n\nFeature Importances:\ngrade: 0.3684\nsqft_living: 0.1806\nwaterfront: 0.1562\nview: 0.0565\nzipcode: 0.0460\nyr_built: 0.0440\nbathrooms: 0.0373\nsqft_living15: 0.0262\ncondition: 0.0162\nyr_renovated: 0.0144\nsqft_lot: 0.0124\nsqft_lot15: 0.0110\nfloors: 0.0095\nsqft_above: 0.0080\nsqft_basement: 0.0075\nbedrooms: 0.0055\n\n\n\n\n\n\n\n\n\n\nX = housing[['grade',\n         'sqft_living',\n         'waterfront',  # research waterfront in seattle\n         'view',\n         'zipcode',\n         #'sqft_living15',\n         'sqft_lot15'\n         ]]\n\ny = housing['price']\n\n#heatmaps\n\n#Create the training and testing dataset on a 20/80 test.train split on the data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Create the model and train it, use default hyperparameters for now\nmodel = XGBRegressor()\nmodel.fit(X_train, y_train)\n\n# Get predictions for our test data\nprice = model.predict(X_test)\nprice\n\n#X_test[\"price\"] = price\n\n#price = X_test['price']\n\n\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\n/usr/local/lib/python3.11/dist-packages/pandas/core/indexes/base.py in get_loc(self, key)\n   3804         try:\n-&gt; 3805             return self._engine.get_loc(casted_key)\n   3806         except KeyError as err:\n\nindex.pyx in pandas._libs.index.IndexEngine.get_loc()\n\nindex.pyx in pandas._libs.index.IndexEngine.get_loc()\n\npandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()\n\npandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()\n\nKeyError: 'price'\n\nThe above exception was the direct cause of the following exception:\n\nKeyError                                  Traceback (most recent call last)\n&lt;ipython-input-36-bc441cf0bfd0&gt; in &lt;cell line: 0&gt;()\n     11          ]]\n     12 \n---&gt; 13 y = mini_holdout['price']\n     14 \n     15 #heatmaps\n\n/usr/local/lib/python3.11/dist-packages/pandas/core/frame.py in __getitem__(self, key)\n   4100             if self.columns.nlevels &gt; 1:\n   4101                 return self._getitem_multilevel(key)\n-&gt; 4102             indexer = self.columns.get_loc(key)\n   4103             if is_integer(indexer):\n   4104                 indexer = [indexer]\n\n/usr/local/lib/python3.11/dist-packages/pandas/core/indexes/base.py in get_loc(self, key)\n   3810             ):\n   3811                 raise InvalidIndexError(key)\n-&gt; 3812             raise KeyError(key) from err\n   3813         except TypeError:\n   3814             # If we have a listlike key, _check_indexing_error will raise\n\nKeyError: 'price'\n\n\n\n\nmini_holdout = pd.read_csv('https://raw.githubusercontent.com/byui-cse/cse450-course/master/data/housing_holdout_test_mini.csv')\n\nmini_holdout.head(5)\n\n\n    \n\n\n\n\n\n\nid\ndate\nbedrooms\nbathrooms\nsqft_living\nsqft_lot\nfloors\nwaterfront\nview\ncondition\ngrade\nsqft_above\nsqft_basement\nyr_built\nyr_renovated\nzipcode\nlat\nlong\nsqft_living15\nsqft_lot15\n\n\n\n\n0\n930000305\n20141110T000000\n4\n1.75\n2120\n7680\n1.0\n0\n0\n4\n7\n1060\n1060\n1950\n0\n98177\n47.7172\n-122.361\n1530\n7680\n\n\n1\n9541600015\n20150211T000000\n4\n2.25\n2010\n15375\n1.0\n0\n0\n4\n8\n2010\n0\n1957\n0\n98005\n47.5956\n-122.174\n1930\n15375\n\n\n2\n7338000150\n20150129T000000\n2\n1.00\n1070\n4200\n1.0\n0\n0\n4\n6\n1070\n0\n1983\n0\n98002\n47.3336\n-122.215\n1150\n4200\n\n\n3\n6113400046\n20140723T000000\n4\n2.50\n1890\n15770\n2.0\n0\n0\n4\n7\n1890\n0\n1968\n0\n98166\n47.4281\n-122.343\n2410\n15256\n\n\n4\n291310170\n20140804T000000\n3\n2.50\n1600\n2610\n2.0\n0\n0\n3\n8\n1600\n0\n2005\n0\n98027\n47.5344\n-122.068\n1445\n1288\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\n#MINI HOLD OUT\nmini_holdout = pd.read_csv('https://raw.githubusercontent.com/byui-cse/cse450-course/master/data/housing_holdout_test.csv')\n\nprice = model.predict(mini_holdout)\nprice\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n&lt;ipython-input-39-d6f8e5d6f036&gt; in &lt;cell line: 0&gt;()\n      2 mini_holdout = pd.read_csv('https://raw.githubusercontent.com/byui-cse/cse450-course/master/data/housing_holdout_test.csv')\n      3 \n----&gt; 4 price = model.predict(mini_holdout)\n      5 price\n\n/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py in predict(self, X, output_margin, validate_features, base_margin, iteration_range)\n   1184             if self._can_use_inplace_predict():\n   1185                 try:\n-&gt; 1186                     predts = self.get_booster().inplace_predict(\n   1187                         data=X,\n   1188                         iteration_range=iteration_range,\n\n/usr/local/lib/python3.11/dist-packages/xgboost/core.py in inplace_predict(self, data, iteration_range, predict_type, missing, validate_features, base_margin, strict_shape)\n   2510             data = pd.DataFrame(data)\n   2511         if _is_pandas_df(data):\n-&gt; 2512             data, fns, _ = _transform_pandas_df(data, enable_categorical)\n   2513             if validate_features:\n   2514                 self._validate_features(fns)\n\n/usr/local/lib/python3.11/dist-packages/xgboost/data.py in _transform_pandas_df(data, enable_categorical, feature_names, feature_types, meta)\n    601     meta: Optional[str] = None,\n    602 ) -&gt; Tuple[PandasTransformed, Optional[FeatureNames], Optional[FeatureTypes]]:\n--&gt; 603     pandas_check_dtypes(data, enable_categorical)\n    604     if meta and len(data.columns) &gt; 1 and meta not in _matrix_meta:\n    605         raise ValueError(f\"DataFrame for {meta} cannot have multiple columns\")\n\n/usr/local/lib/python3.11/dist-packages/xgboost/data.py in pandas_check_dtypes(data, enable_categorical)\n    567             or is_pa_ext_dtype(dtype)\n    568         ):\n--&gt; 569             _invalid_dataframe_dtype(data)\n    570 \n    571         if is_pd_sparse_dtype(dtype):\n\n/usr/local/lib/python3.11/dist-packages/xgboost/data.py in _invalid_dataframe_dtype(data)\n    354     type_err = \"DataFrame.dtypes for data must be int, float, bool or category.\"\n    355     msg = f\"\"\"{type_err} {_ENABLE_CAT_ERR} {err}\"\"\"\n--&gt; 356     raise ValueError(msg)\n    357 \n    358 \n\nValueError: DataFrame.dtypes for data must be int, float, bool or category. When categorical type is supplied, the experimental DMatrix parameter`enable_categorical` must be set to `True`.  Invalid columns:date: object\n\n\n\n\n#download predictions into a csv\n# Write the dataframe to a csv, then download it\nfrom google.colab import files\npredictions = pd.DataFrame(price)\n\nprice.to_csv('price.csv', index = False)\nfiles.download(\"price.csv\")\n\n\n\n\n\n\n\n\n#R-SQUARED METRIC VALUE\n#RMSLE VALUE\nfrom sklearn.metrics import r2_score\nr_squared = r2_score(y_test, predictions)\nr_squared\n\n0.8333289792723318\n\n\n\nmini_holdout = pd.read_csv('https://raw.githubusercontent.com/byui-cse/cse450-course/master/data/housing_holdout_test_mini.csv')\n\n\npredic\n\n\n# Compute the Root Mean Squared Error of the predictions\nfrom sklearn.metrics import mean_squared_error\n\nresult = mean_squared_error(y_test, predictions, squared=False)\nresult\n\n# Looks like we're off by just 4.5 mpg on average\n# Not bad for a quick run with no real preprocessing\n\n/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_regression.py:492: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.\n  warnings.warn(\n\n\n159411.28494564872\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "index.html#title-2-header",
    "href": "index.html#title-2-header",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "Cleansing_Exploration/project1.html",
    "href": "Cleansing_Exploration/project1.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Cleansing_Exploration/project2.html",
    "href": "Cleansing_Exploration/project2.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Cleansing_Exploration/project4.html",
    "href": "Cleansing_Exploration/project4.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "story_telling.html",
    "href": "story_telling.html",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "story_telling.html#title-2-header",
    "href": "story_telling.html#title-2-header",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "cleansing.html",
    "href": "cleansing.html",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "cleansing.html#title-2-header",
    "href": "cleansing.html#title-2-header",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "ml.html",
    "href": "ml.html",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "ml.html#title-2-header",
    "href": "ml.html#title-2-header",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "resume.html",
    "href": "resume.html",
    "title": "Jezreel Franco",
    "section": "",
    "text": "Data Analyst | BYU-I Data Science Student\n\nisaac@applesdofall.org | My wikipedia page\n\n\n\nWorking as a Data Analyst at Brigham Young Univerity - Idaho.\n\n\nSQL | R | Power BI | Python\n\n\n\nData visualizations and manipulation.\n\n\n\n\n2017-2021 Deer Valley High School, Antioch, CA\nSept 2021 - now Brigham Young Univesity - Idaho, Rexburg, ID\n\n\n\n2021 Mesa Honors, CSU Easy Bay, Hayward, Califonia\nAP Scholar with Honor, College Board, CA, USA\n\n\n\n2024 - Now Data Analyst, Rexburg, Idaho\n\nCreate and prepare dashboards\nData wranging, visualization"
  },
  {
    "objectID": "resume.html#currently",
    "href": "resume.html#currently",
    "title": "Jezreel Franco",
    "section": "",
    "text": "Working as a Data Analyst at Brigham Young Univerity - Idaho.\n\n\nSQL | R | Power BI | Python\n\n\n\nData visualizations and manipulation."
  },
  {
    "objectID": "resume.html#education",
    "href": "resume.html#education",
    "title": "Jezreel Franco",
    "section": "",
    "text": "2017-2021 Deer Valley High School, Antioch, CA\nSept 2021 - now Brigham Young Univesity - Idaho, Rexburg, ID"
  },
  {
    "objectID": "resume.html#awards",
    "href": "resume.html#awards",
    "title": "Jezreel Franco",
    "section": "",
    "text": "2021 Mesa Honors, CSU Easy Bay, Hayward, Califonia\nAP Scholar with Honor, College Board, CA, USA"
  },
  {
    "objectID": "resume.html#occupation",
    "href": "resume.html#occupation",
    "title": "Jezreel Franco",
    "section": "",
    "text": "2024 - Now Data Analyst, Rexburg, Idaho\n\nCreate and prepare dashboards\nData wranging, visualization"
  },
  {
    "objectID": "Cleansing_Exploration/project5.html",
    "href": "Cleansing_Exploration/project5.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Cleansing_Exploration/project3.html",
    "href": "Cleansing_Exploration/project3.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "ML_Case_Study_2.html",
    "href": "ML_Case_Study_2.html",
    "title": "Jezreel Franco - Data Science Portfolio",
    "section": "",
    "text": "import pandas as pd\n\n#read in the data\ncampaign = pd.read_csv('https://raw.githubusercontent.com/byui-cse/cse450-course/master/data/bank.csv')\n#bank = pd.read_csv('https://raw.githubusercontent.com/byui-cse/cse450-course/master/data/bank.csv')\nbank_holdout = pd.read_csv('https://raw.githubusercontent.com/byui-cse/cse450-course/master/data/bank_holdout_test.csv')\nbank_hold_mini = pd.read_csv('https://raw.githubusercontent.com/byui-cse/cse450-course/master/data/bank_holdout_test_mini.csv')\n\n\n#decision tree\nfrom sklearn import tree\nfrom sklearn.ensemble import RandomForestClassifier\n#from sklearn.preprocessing import OneHotEncorder\nfrom sklearn.model_selection import train_test_split\n\n#outcome target (y-variable) = customers most likely to subscribe to a term deposit\ncampaign.head(5)\n\ncampaign['campaign'] = campaign['campaign'].astype('category')\n\n#encode features and target variables\nfeatures = ['emp.var.rate',\n            'euribor3m',\n            'cons.price.idx',\n            'nr.employed',\n            'contact'\n            #'campaign', 'poutcome', 'age',\n            #'education', # interested to know if they should contact students\n            #'marital', #single people on Saturdays? #better to visualiz with graph?\n            #'day_of_week' #focus on Saturday\n            ]\nX = pd.get_dummies(campaign[features])\ny = campaign['y']\n\n#split to train and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20)\n\n#build decision tree\nclf = RandomForestClassifier()\n\n#train\nclf.fit(X_train, y_train)\n\n#test\nclf.score(X_test, y_test)\n\n0.8964121931480982\n\n\n\n#PREDICT ON THE MINI DATASET\n#assign the same features to the mini dataset\nmini_X = pd.get_dummies(bank_hold_mini[features])\n\n#align columns with the campaign dataset\nmini_X = bank_hold_mini.reindex(columns = X.columns, fill_value=0)\n\n#make a predictions column, filled in with the predictions\nmini_X['predictions (y)'] = clf.predict(mini_X)\n\nmini_X\n\n\n    \n\n\n\n\n\n\nemp.var.rate\neuribor3m\ncons.price.idx\nnr.employed\ncontact_cellular\ncontact_telephone\npredictions (y)\n\n\n\n\n0\n1.4\n4.962\n93.918\n5228.1\n0\n0\nno\n\n\n1\n-1.8\n1.344\n92.893\n5099.1\n0\n0\nno\n\n\n2\n-1.7\n0.739\n94.055\n4991.6\n0\n0\nno\n\n\n3\n1.4\n4.959\n94.465\n5228.1\n0\n0\nno\n\n\n4\n-0.1\n4.120\n93.200\n5195.8\n0\n0\nno\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n405\n-1.8\n1.250\n92.893\n5099.1\n0\n0\nno\n\n\n406\n1.4\n4.962\n93.918\n5228.1\n0\n0\nno\n\n\n407\n1.4\n4.967\n94.465\n5228.1\n0\n0\nno\n\n\n408\n-0.1\n4.021\n93.200\n5195.8\n0\n0\nno\n\n\n409\n-1.8\n1.334\n92.893\n5099.1\n0\n0\nno\n\n\n\n\n410 rows × 7 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\n#PERFORMANCE OF MODEL\n#accuracy, precision, recall, F1 score\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\ny_pred = clf.predict(X_test)\n\n# calculations\nprecision = precision_score(y_test, y_pred, pos_label='yes', average='binary')\nrecall = recall_score(y_test, y_pred, pos_label='yes', average='binary')\nf1 = f1_score(y_test, y_pred, pos_label='yes', average='binary')\n\nprint(f\"Precision Score: {precision}\")\nprint(f\"Recall: {recall}\")\nprint(f\"F1 Score: {f1}\")\n\n\n\nPrecision Score: 0.5742857142857143\nRecall: 0.2451219512195122\nF1 Score: 0.3435897435897436\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "exploration.html",
    "href": "exploration.html",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "exploration.html#title-2-header",
    "href": "exploration.html#title-2-header",
    "title": "about me",
    "section": "",
    "text": "MarkDown Basics"
  },
  {
    "objectID": "notebooks/module03_housing_grading_mini.html",
    "href": "notebooks/module03_housing_grading_mini.html",
    "title": "Jezreel Franco - Data Science Portfolio",
    "section": "",
    "text": "Prep work:\n\nDownload team csv predictions file\nRename files to team8-module3-predictions.csv where team8 is the name of your team\nMake sure file is one column and remove any extra columns\nMake sure the heading is set to “price” (without quotes)\nUpload csv predictions to session storage area.\nClick the folder icon, then click the upload icon (paper with an upward arrow)\nRun the notebook (Runtime -&gt; Run all)\n\n\n# MODULE 03 - HOUSING HOLDOUT GRADING\n\nfrom pathlib import Path\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import root_mean_squared_error, mean_squared_error, r2_score, mean_absolute_error, median_absolute_error\n\n# READ IN THE CSV FILES\nteam_dir = Path(\"./\")\nteams = team_dir.glob(\"price (3).csv\")\nteam_list = []\nfor team in teams:\n  # print(latent_file)\n  team_list.append((str(team).split(\"-\",1)[0],team))\n\n# print(team_list)\n\n\n# READ IN THE HOLDOUT ANSWERS\ntargets_file = \"https://raw.githubusercontent.com/byui-cse/cse450-course/master/data/housing_holdout_test_mini_answers.csv\"\ntargets = pd.read_csv(targets_file)\n# targets\n\n\n# ARE THE STUDENT DATASETS THE CORRECT LENGTH\nstudent_datasets = {}\nfor (group, file) in team_list:\n  ds = pd.read_csv(file)\n\n  if ds.shape != targets.shape:\n    print(f\"Error group {group} ds had {ds.shape} rows and columns instead of the expected {targets.shape}. It will be excluded.\")\n  else:\n    student_datasets[group] = ds\n    print(f\"Group {group} added successfully\")\n\nGroup price (3).csv added successfully\n\n\n\n# student_datasets\n\n\nresults_dict = {}\n\n\nfor group, student_ds in student_datasets.items():\n  student_dict = {}\n  # print(group,cm)\n  student_ds.columns=['price']\n  mse = root_mean_squared_error(targets, student_ds)\n  # print(\"{} - RMSE: {}\".format(group, mse))\n\n  student_dict[\"RMSE\"] = root_mean_squared_error(targets, student_ds)\n  student_dict[\"Mean Abs Error\"] = mean_absolute_error(targets, student_ds)\n  student_dict[\"Median Abs Error\"] = median_absolute_error(targets, student_ds)\n  student_dict[\"R2\"] = r2_score(targets, student_ds)\n\n  combined = pd.concat([targets, student_ds], axis=1)\n  combined.columns = [\"target\", \"pred\"]\n  combined[\"absdiff\"] = (combined[\"target\"] - combined[\"pred\"]).abs()\n  combined[\"absdiff_pct\"] = combined[\"absdiff\"] / combined[\"target\"]\n\n  shower = pd.DataFrame(student_ds, columns = ['price'])\n  shower.columns = ['predictions']\n  testfinal = pd.concat([shower,targets['price']],axis=1)\n  testfinal['difference'] = testfinal['price']-testfinal['predictions']\n  testfinal['percent_difference'] = abs(testfinal['difference']/testfinal['price'])\n  testfinal['percent_bucket'] = [ \"above 20%\" if i &gt;= 0.2 else \"below 20%\" for i in testfinal.percent_difference ]\n\n  # testfinal\n\n  student_dict['dataset'] = testfinal\n  percents = [5, 10, 20]\n  for percent in percents:\n    student_dict[f\"Percent of houses within {percent} percent\"] = len(combined[combined[\"absdiff_pct\"] &lt;= (percent /100)]) / len(combined) * 100\n\n  results_dict[group] = student_dict\n\n\n# df['predictions']\n\n\n# results_dict\n\n\nresults_df = pd.DataFrame(results_dict)\nresults_ds_trans = results_df.transpose()\nresults_ds_trans = results_ds_trans.drop(columns=[\"dataset\"])\n\nresults_ds_trans = results_ds_trans.round(2)\nresults_ds_trans = results_ds_trans.sort_values(by=\"R2\",ascending=False)\n\n\n# results_df\n\n\nsns.set(rc={'figure.figsize':(11.7,8.27)})\nfor team_results in results_dict.items():\n  testfinal = team_results[1]['dataset']\n  # print(team_results['dataset'])\n  # print(f\"R-Squared Value: {r2}\")\n  print(f\"-------------------------------- {team_results[0].upper()} RESULTS ---------------------------------\\n\")\n  print(f\" Within 5%: {team_results[1]['Percent of houses within 5 percent']}%\\n\",\n  f\"Within 10%: {team_results[1]['Percent of houses within 10 percent']}%\\n\",\n  f\"Within 20%: {team_results[1]['Percent of houses within 20 percent']}%\\n\",\n  f\"R^2: {team_results[1]['R2']}%\\n\",\n  f\"RMSE: {team_results[1]['RMSE']}\\n\",\n  f\"Mean Absolute Error: {team_results[1]['Mean Abs Error']}\\n\",\n  f\"Median Aboslute Error: {team_results[1]['Median Abs Error']}\")\n\n\n  color_dict = dict({'below 20%':'tab:blue',\n                    'above 20%': 'tab:orange'})\n  # print(testfinal['abspercentmiss'].describe(percentiles=[.1,.2,.3,.4,.5,.6,.7,.8,.9,.95]))\n  xlims=(0,4e6)\n  ylims=(0,4e6)\n  ax = sns.scatterplot(data=testfinal,x='price',y='predictions',hue=\"percent_bucket\",palette=color_dict)\n  # ax.set(xscale=\"log\", yscale=\"log\", xlim=xlims, ylim=ylims)\n  ax.plot(xlims,xlims, color='r')\n  # plt.legend(labels=['perfect',\"below 5\",'above 5','10-20%','above 20'])\n  plt.show()\n  print(f\"-\"*77)\n  print(\"\\n\"*3)\n\n-------------------------------- PRICE (3).CSV RESULTS ---------------------------------\n\n Within 5%: 23.456790123456788%\n Within 10%: 45.67901234567901%\n Within 20%: 74.07407407407408%\n R^2: 0.8057082601457985%\n RMSE: 125995.62348901793\n Mean Absolute Error: 79095.08802469134\n Median Aboslute Error: 45747.19\n\n\n\n\n\n\n\n\n\n-----------------------------------------------------------------------------\n\n\n\n\n\n\n\nresults_ds_trans = results_df.transpose()\n\nresults_ds_trans = results_ds_trans.drop(columns=[\"dataset\"])\nresults_ds_trans.to_csv(\"class_results.csv\")\nresults_ds_trans\n\n\n    \n\n\n\n\n\n\nRMSE\nMean Abs Error\nMedian Abs Error\nR2\nPercent of houses within 5 percent\nPercent of houses within 10 percent\nPercent of houses within 20 percent\n\n\n\n\nprice (3).csv\n125995.623489\n79095.088025\n45747.19\n0.805708\n23.45679\n45.679012\n74.074074\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Competition/project5.html",
    "href": "Competition/project5.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Competition/project3.html",
    "href": "Competition/project3.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Cleansing_Projects/project4.html",
    "href": "Cleansing_Projects/project4.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Cleansing_Projects/project2.html",
    "href": "Cleansing_Projects/project2.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Cleansing_Projects/project1.html",
    "href": "Cleansing_Projects/project1.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Full_Stack/project4.html",
    "href": "Full_Stack/project4.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Full_Stack/project2.html",
    "href": "Full_Stack/project2.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Full_Stack/project1.html",
    "href": "Full_Stack/project1.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Machine_Learning/project4.html",
    "href": "Machine_Learning/project4.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Machine_Learning/project2.html",
    "href": "Machine_Learning/project2.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Machine_Learning/project1.html",
    "href": "Machine_Learning/project1.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Story_Telling/project5.html",
    "href": "Story_Telling/project5.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Story_Telling/project3.html",
    "href": "Story_Telling/project3.html",
    "title": "Client Report - [Insert Project Title]",
    "section": "",
    "text": "Paste in a template\n\n\n\n\n Back to top"
  }
]